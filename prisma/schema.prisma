// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//   id String @id @default(cuid())
//   name String
//   description String
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          Role      @default(USER)
  name          String?
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  // subscriptions     Subscription[]
  // votes             Vote[]
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model Post {
  id          String  @id @default(cuid())
  title       String
  content     String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  // likes               Like[]
  // bookmarks           Bookmark[]
  // comments            Comment[]
  // linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

// model Post {
//   id         String   @id @default(cuid())
//   title      String
//   slug       String   @unique
//   content    Json?
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   author     User     @relation(fields: [authorId], references: [id])
//   authorId   String
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String
//   published  Boolean  @default(false)
// }

// model Category {
//   id          String   @id @default(cuid())
//   name        String   @unique
//   image       String?
//   slug        String   @unique
//   description String?
//   hideBlock   Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   posts       Post[]

//   creatorId String?
//   Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])
//   // subscribers Subscription[]
//   User      User?   @relation(fields: [userId], references: [id])
//   userId    String?

//   @@index([name])
// }

// model Subscription {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String

//   @@id([userId, categoryId])
// }
